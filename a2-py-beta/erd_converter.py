from audioop import add
from erd import *
from table import *

# This function converts an ERD object into a Database object
# The Database object should correspond to a fully correct implementation
# of the ERD, including both data structure and constraints, such that the
# CREATE TABLE statements generated by the Database object will populate an
# empty MySQL database to exactly implement the conceptual design communicated
# by the ERD.
#
# @TODO: Implement me!
def convert_to_table( erd ):
    if len(erd.entity_sets[0].connections) != 0 and len(erd.entity_sets[1].connections) != 0:
        divide0 = erd.entity_sets[0].connections[0]
        set1, set2 = zip(divide0)
        divide1 = erd.entity_sets[1].connections[0]
        set11, set22 = zip(divide1)
        
    entity_length = len(erd.entity_sets)
    if entity_length == 1:
         end = one_entity(erd)
         return end
    elif len(erd.entity_sets) == 3 and ((len(erd.entity_sets[0].parents) != 0) or (len(erd.entity_sets[1].parents) != 0) or (len(erd.entity_sets[2].parents) != 0)):
        end = threeEntitySetWithParents(erd)
        return end
    elif erd.entity_sets[0].supporting_relations != [] and len(erd.entity_sets) == 2:
        end = twoEntitySetWithSupportingRelation(erd)
        return end
    elif len(erd.entity_sets) == 3 and len(erd.relationships) == 1:
        end = threeEntitySetsOneManyRelationship(erd)
        return end
    elif erd.entity_sets[1].supporting_relations != [] and len(erd.entity_sets) == 2:
        end = twoEntitySetWithSupportingRelation(erd)
        return end
    
    
    elif entity_length == 2 and ((len(erd.entity_sets[0].parents) != 0) or (len(erd.entity_sets[1].parents) != 0)):
        end = TwoEntityNoRelationship(erd)
        return end
    elif entity_length == 2 and len(erd.relationships[0].primary_key) != 0 and set22[0].value == 0:
        end = oneManyWithRelationshipAttr(erd, set2)
        return end
    elif entity_length == 2 and len(erd.relationships[0].primary_key) != 0 and set2[0].value == 0:
        end = manyOneWithRelationshipAttr(erd,set22)
        return end
    elif entity_length == 4:
         end = fourEntitySetsWeak(erd)
         return end
    else:
        
        #rel_length = len(erd.relationships)
        #erd_length = entity_length + rel_length
        split = erd.entity_sets[0].connections[0]
        list1, list2 = zip(split)
        split2 = erd.entity_sets[1].connections[0]
        list11, list22 = zip(split2)
        #print(list22[0].value)
        #print(list2[0].value)
        if list22[0].value == 0:
            finish = one_many(erd , entity_length)
            return finish
        elif list2[0].value ==0:
            finish2 = many_one(erd, entity_length)
            return finish2

        
            
        else:



        #   if entity_length == 1:
        #      one_entity(erd)
        #     return
            #elif erd_length == 1 and list2[0].value == 1:
            #   two_entity(erd)
            #  return
            
            foreign_key = []
            my_db = []
            #db = Database([])
            entity_length = len(erd.entity_sets)
            rel_length = len(erd.relationships)
            erd_length = entity_length + rel_length
            split = erd.entity_sets[0].connections[0]
            list1, list2 = zip(split)
            amount_primary1 = len(erd.entity_sets[0].primary_key)
            amount_primary2 = len(erd.entity_sets[1].primary_key)
            if (list1[0]) == erd.relationships[0].name and list2[0].value == 1:
                for x in range(amount_primary1):
                    erd.relationships[0].attributes.append(erd.entity_sets[0].primary_key[x])
                    erd.relationships[0].primary_key.append(erd.entity_sets[0].primary_key[x])
                for x in range(amount_primary2):
                    erd.relationships[0].attributes.append(erd.entity_sets[1].primary_key[x])
                    erd.relationships[0].primary_key.append(erd.entity_sets[1].primary_key[x])
                
                
                
            t = ((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,))
            foreign_key = t
            for x in range(entity_length):
                if erd.entity_sets[x].name != [] and erd.entity_sets[x].attributes != [] and erd.entity_sets[x].primary_key != []:
                    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))
            


                    
            for x in range(rel_length):
                if erd.relationships[x].name != []:
                    my_db.append(Table(erd.relationships[x].name,set(erd.relationships[x].attributes),set(erd.relationships[x].primary_key),set(foreign_key)))
                    
            db = Database(my_db)
            cat = erd.entity_sets[0].primary_key[0]
            
            #print(erd.entity_sets[0].name)
            #print(erd_length)
            #print(db.tables)
            #print(amount_primary1)
            #print(cat)
            #print(sample_db.tables)
            #for y in db:
            #  print(y.tables)
            #print(erd.entity_sets[1].attributes[0])
        
            #return sample_db
            return db

def one_entity(erd):
    my_db = []
    db = Database([])
    entity_length = len(erd.entity_sets)

    for x in range(entity_length):
        if erd.entity_sets[x].name != '' and erd.entity_sets[x].attributes != '' and erd.entity_sets[x].primary_key != '':
            #my_db.append(Table(erd.entity_sets[x].name,erd.entity_sets[x].attributes,erd.entity_sets[x].primary_key,''))
            my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))
    db = Database(my_db)
    #print(db.tables)
    return db



def one_many(erd, entity_length):
    foreign_key = []
    
    my_db = []
    
    amount_primary1 = len(erd.entity_sets[1].primary_key)
    
    for x in range(amount_primary1):
        erd.entity_sets[0].attributes.append(erd.entity_sets[1].primary_key[x])
        #erd.entity_sets[0].primary_key.append(erd.entity_sets[1].primary_key[x])
        
    t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
    foreign_key = t
    #print(t)
    #print(entity_length)
    
    my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set(foreign_key)))
    my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set()))
    db = Database(my_db)
    #print(db.tables)
    return db

def many_one(erd, entity_length):
    foreign_key = []
    
    my_db = []
    
    amount_primary1 = len(erd.entity_sets[0].primary_key)
    
    for x in range(amount_primary1):
        erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
        #erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
        
    t = ((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,))
    foreign_key = t
    #print(t)
    #print(entity_length)
    #my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set([((erd.entity_sets[1].primary_key[1],), erd.entity_sets[1].name, (erd.entity_sets[1].primary_key[1],))])))
    #my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set()))
    my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set()))
    my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set(foreign_key)))
    db = Database(my_db)
    #print(db.tables)
    return db

def TwoEntityNoRelationship(erd):
    foreign_key = [] 
    my_db = []
    entity_length = len(erd.entity_sets)
    
    for x in range(1):
        if erd.entity_sets[0].parents != []:
            for x in range(len(erd.entity_sets[1].primary_key)):
                erd.entity_sets[0].attributes.append(erd.entity_sets[1].primary_key[x])
                erd.entity_sets[0].primary_key.append(erd.entity_sets[1].primary_key[x])
        elif erd.entity_sets[1].parents != []:
            for x in range(len(erd.entity_sets[0].primary_key)):
                erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
                erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
    
    if erd.entity_sets[0].parents != []:
        t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
    elif erd.entity_sets[1].parents != []:
        t = ((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),

    foreign_key = t
    for x in range(entity_length):
        if erd.entity_sets[x].name != [] and erd.entity_sets[x].parents != []:
            my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set(foreign_key)))
        elif erd.entity_sets[x].name != []:
            my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))


    db = Database(my_db)
    #print(db.tables)
    return db

def oneManyWithRelationshipAttr(erd, set2):
    foreign_key = [] 
    my_db = []
    entity_length = len(erd.entity_sets)

    amount_primary1 = len(erd.entity_sets[1].primary_key)
    
    for x in range(amount_primary1):
        erd.entity_sets[0].attributes.append(erd.entity_sets[1].primary_key[x])
        #erd.entity_sets[0].primary_key.append(erd.entity_sets[1].primary_key[x])
    for x in range(len(erd.relationships[0].primary_key)):
        erd.entity_sets[0].attributes.append(erd.relationships[0].primary_key[x])
        erd.entity_sets[0].primary_key.append(erd.relationships[0].primary_key[x])

    t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
    foreign_key = t

    #for x in range(entity_length):
     #   if erd.entity_sets[x].name != '' and erd.entity_sets[x].attributes != '' and erd.entity_sets[x].primary_key != '' and set2 == 1:
      #      my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set(foreign_key)))
       # elif erd.entity_sets[x].name != '' and erd.entity_sets[x].attributes != '' and erd.entity_sets[x].primary_key != '':
        #    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))

    my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set(foreign_key)))
    my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set()))

    db = Database(my_db)
    #print(db.tables)
    return db

def manyOneWithRelationshipAttr(erd,set22):
    foreign_key = [] 
    my_db = []
    entity_length = len(erd.entity_sets)

    amount_primary1 = len(erd.entity_sets[0].primary_key)
    
    for x in range(amount_primary1):
        erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
        erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
    for x in range(len(erd.relationships[0].primary_key)):
        erd.entity_sets[1].attributes.append(erd.relationships[0].primary_key[x])
        erd.entity_sets[1].primary_key.append(erd.relationships[0].primary_key[x])

    t = ((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),
    foreign_key = t

    #for x in range(entity_length):
     #   if erd.entity_sets[x].name != '' and erd.entity_sets[x].attributes != '' and erd.entity_sets[x].primary_key != '' and set22 == 1:
      #      my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set(foreign_key)))
       # elif erd.entity_sets[x].name != '' and erd.entity_sets[x].attributes != '' and erd.entity_sets[x].primary_key != '':
        #    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))

    my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set()))
    my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set(foreign_key)))


    db = Database(my_db)
    #print(db.tables)
    return db

def twoEntitySetWithSupportingRelation(erd):
    foreign_key = [] 
    my_db = []
    entity_length = len(erd.entity_sets)
    for x in range(1):
        if erd.entity_sets[0].supporting_relations != []:
            amount_primary1 = len(erd.entity_sets[1].primary_key)
            for x in range(amount_primary1):
                erd.entity_sets[0].attributes.append(erd.entity_sets[1].primary_key[x])
                erd.entity_sets[0].primary_key.append(erd.entity_sets[1].primary_key[x])
            
            t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
            foreign_key = t
            my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set(foreign_key)))
            my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set()))


            db = Database(my_db)
            #print(db.tables)
            return db
        elif erd.entity_sets[1].supporting_relations != []:
            amount_primary1 = len(erd.entity_sets[0].primary_key)
            for x in range(amount_primary1):
                erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
                erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
            t = ((erd.entity_sets[0].primary_key[0],),erd.entity_sets[0].name,(erd.entity_sets[0].primary_key[0],)),
            foreign_key = t
            
            my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set()))
            my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key), set(foreign_key)))
            db = Database(my_db)
            #print(db.tables)
            return db

def threeEntitySetsOneManyRelationship( erd ):
    foreign_key = [] 
    my_db = []
    t = set()
    entity_length = len(erd.entity_sets)
    divide00 = erd.entity_sets[0].connections[0]
    set1, set2 = zip(divide00)
    divide11 = erd.entity_sets[1].connections[0]
    set11, set22 = zip(divide11)
    divide22 = erd.entity_sets[2].connections[0]
    set111, set222 = zip(divide22)
    for x in range(1):
        if set2[0].value == 0:
            for x in range(len(erd.entity_sets[0].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[0].primary_key[x])
            for x in range(len(erd.entity_sets[1].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[1].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[1].primary_key[x])
            for x in range(len(erd.entity_sets[2].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[2].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[2].primary_key[x])
            t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),((*erd.entity_sets[2].primary_key,),erd.entity_sets[2].name,(*erd.entity_sets[2].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,))
            foreign_key = t
            for x in range(entity_length):
                if erd.entity_sets[x].name != [] and erd.entity_sets[x].attributes != [] and erd.entity_sets[x].primary_key != []:
                    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))
            for x in range(1):
                if erd.relationships[x].name != [] and erd.relationships[x].attributes != []:
                    my_db.append(Table(erd.relationships[x].name,set(erd.relationships[x].attributes),set(erd.relationships[x].primary_key),set(foreign_key)))
            db = Database(my_db)
            #print(db.tables)
            return db
        elif set22[0].value == 0:
            for x in range(len(erd.entity_sets[0].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[0].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[0].primary_key[x])
            for x in range(len(erd.entity_sets[1].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[1].primary_key[x])
            for x in range(len(erd.entity_sets[2].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[2].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[2].primary_key[x])
            t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),((*erd.entity_sets[2].primary_key,),erd.entity_sets[2].name,(*erd.entity_sets[2].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,))
            foreign_key = t
            for x in range(entity_length):
                if erd.entity_sets[x].name != [] and erd.entity_sets[x].attributes != [] and erd.entity_sets[x].primary_key != []:
                    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))
            for x in range(1):
                if erd.relationships[x].name != [] and erd.relationships[x].attributes != []:
                    my_db.append(Table(erd.relationships[x].name,set(erd.relationships[x].attributes),set(erd.relationships[x].primary_key),set(foreign_key)))
            db = Database(my_db)
            #print(db.tables)
            return db
        elif set222[0].value == 0:
            for x in range(len(erd.entity_sets[0].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[0].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[0].primary_key[x])
            for x in range(len(erd.entity_sets[1].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[1].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[1].primary_key[x])
            for x in range(len(erd.entity_sets[2].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[2].primary_key[x])
                
            t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),((*erd.entity_sets[2].primary_key,),erd.entity_sets[2].name,(*erd.entity_sets[2].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,))
            foreign_key = t
            for x in range(entity_length):
                if erd.entity_sets[x].name != [] and erd.entity_sets[x].attributes != [] and erd.entity_sets[x].primary_key != []:
                    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))
            for x in range(1):
                if erd.relationships[x].name != [] and erd.relationships[x].attributes != []:
                    my_db.append(Table(erd.relationships[x].name,set(erd.relationships[x].attributes),set(erd.relationships[x].primary_key),set(foreign_key)))
            db = Database(my_db)
            #print(db.tables)
            return db
        else:
            for x in range(len(erd.entity_sets[0].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[0].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[0].primary_key[x])
            for x in range(len(erd.entity_sets[1].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[1].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[1].primary_key[x])
            for x in range(len(erd.entity_sets[2].primary_key)):
                erd.relationships[0].attributes.append(erd.entity_sets[2].primary_key[x])
                erd.relationships[0].primary_key.append(erd.entity_sets[2].primary_key[x])
                
            t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),((*erd.entity_sets[2].primary_key,),erd.entity_sets[2].name,(*erd.entity_sets[2].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,))
            foreign_key = t
            for x in range(entity_length):
                if erd.entity_sets[x].name != [] and erd.entity_sets[x].attributes != [] and erd.entity_sets[x].primary_key != []:
                    my_db.append(Table(erd.entity_sets[x].name,set(erd.entity_sets[x].attributes),set(erd.entity_sets[x].primary_key),set()))
            for x in range(1):
                if erd.relationships[x].name != [] and erd.relationships[x].attributes != []:
                    my_db.append(Table(erd.relationships[x].name,set(erd.relationships[x].attributes),set(erd.relationships[x].primary_key),set(foreign_key)))
            db = Database(my_db)
            #print(db.tables)
            return db

def threeEntitySetWithParents(erd):
    foreign_key = [] 
    foreign_key2 = [] 
    my_db = []
    entity_length = len(erd.entity_sets)
    hi = 0
    for x in range(entity_length):
        if erd.entity_sets[x].parents != []:
            hi +=1
    #print(hi)
    if erd.entity_sets[0].parents != [] and erd.entity_sets[1].parents != []:
        t2 = ((*erd.entity_sets[2].primary_key,),erd.entity_sets[2].name,(*erd.entity_sets[2].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),
        for x in range(len(erd.entity_sets[2].primary_key)):
            erd.entity_sets[0].attributes.append(erd.entity_sets[2].primary_key[x])
            erd.entity_sets[0].primary_key.append(erd.entity_sets[2].primary_key[x])
        t = ((*erd.entity_sets[2].primary_key,),erd.entity_sets[2].name,(*erd.entity_sets[2].primary_key,)),
        for x in range(len(erd.entity_sets[0].primary_key)):
            erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
            erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
        foreign_key = t
        foreign_key2 = t2
        my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key),set(foreign_key)))
        my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key),set(foreign_key2)))
        my_db.append(Table(erd.entity_sets[2].name,set(erd.entity_sets[2].attributes),set(erd.entity_sets[2].primary_key),set()))
        db = Database(my_db)
        #print(db.tables)
        return db
    elif erd.entity_sets[1].parents != [] and erd.entity_sets[2].parents != []:
        t2 = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),
        for x in range(len(erd.entity_sets[0].primary_key)):
            erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
            erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
        t = ((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),
        for x in range(len(erd.entity_sets[1].primary_key)):
            erd.entity_sets[2].attributes.append(erd.entity_sets[1].primary_key[x])
            erd.entity_sets[2].primary_key.append(erd.entity_sets[1].primary_key[x])
        foreign_key = t
        foreign_key2 = t2
        my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key),set()))
        my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key),set(foreign_key)))
        my_db.append(Table(erd.entity_sets[2].name,set(erd.entity_sets[2].attributes),set(erd.entity_sets[2].primary_key),set(foreign_key2)))
        db = Database(my_db)
        #print(db.tables)
        return db
    elif erd.entity_sets[0].parents != [] and erd.entity_sets[2].parents != []:
        t2 = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),
        for x in range(len(erd.entity_sets[0].primary_key)):
            erd.entity_sets[1].attributes.append(erd.entity_sets[0].primary_key[x])
            erd.entity_sets[1].primary_key.append(erd.entity_sets[0].primary_key[x])
        t = ((*erd.entity_sets[0].primary_key,),erd.entity_sets[0].name,(*erd.entity_sets[0].primary_key,)),
        for x in range(len(erd.entity_sets[1].primary_key)):
            erd.entity_sets[2].attributes.append(erd.entity_sets[1].primary_key[x])
            erd.entity_sets[2].primary_key.append(erd.entity_sets[1].primary_key[x])
        foreign_key = t
        foreign_key2 = t2
        my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key),set()))
        my_db.append(Table(erd.entity_sets[1].name,set(erd.entity_sets[1].attributes),set(erd.entity_sets[1].primary_key),set(foreign_key)))
        my_db.append(Table(erd.entity_sets[2].name,set(erd.entity_sets[2].attributes),set(erd.entity_sets[2].primary_key),set(foreign_key2)))
        db = Database(my_db)
        #print(db.tables)
        return db

    return entity_length

def fourEntitySetsWeak(erd):
    foreign_key = [] 
    foreign_key2 = [] 
    my_db = []
    entity_length = len(erd.entity_sets)
    #print(entity_length)
    #entity_length = len(erd.entity_sets)
    divi001 = erd.entity_sets[0].connections[0]
    set123, set223 = zip(divi001)
    
    div = erd.entity_sets[3].connections[0]
    #hi, hello = zip(div)
    #print(div)
    count = 0

    for y in range(entity_length-1):
       # print(x)
        if len(erd.entity_sets[y].supporting_relations) == 0 and count == 0:
            count+=1
            #print(count)
            #amount_primary1 = len(erd.entity_sets[1].primary_key)
            #for x in range(amount_primary1):
             #   erd.entity_sets[0].attributes.append(erd.entity_sets[1].primary_key[x])
              #  erd.entity_sets[0].primary_key.append(erd.entity_sets[1].primary_key[x])
            
            #t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
            #foreign_key = t
            #my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set(foreign_key)))
            my_db.append(Table(erd.entity_sets[y].name,set(erd.entity_sets[y].attributes),set(erd.entity_sets[y].primary_key), set()))


           # db = Database(my_db)
            #print(db.tables)
            #return db
        elif len(erd.entity_sets[y].supporting_relations) == 1 and erd.entity_sets[y].supporting_relations[0] == erd.relationships[0].name:
            count+=1
            #print(count)
            amount_primary1 = len(erd.entity_sets[0].primary_key)
            for x in range(amount_primary1):
                
                erd.entity_sets[y].attributes.append(erd.entity_sets[0].primary_key[x])
                erd.entity_sets[y].primary_key.append(erd.entity_sets[0].primary_key[x])
            t = ((erd.entity_sets[0].primary_key[0],),erd.entity_sets[0].name,(erd.entity_sets[0].primary_key[0],)),
            foreign_key = t
            #print(y)
            #my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set()))
            my_db.append(Table(erd.entity_sets[y].name,set(erd.entity_sets[y].attributes),set(erd.entity_sets[y].primary_key), set(foreign_key)))
            #db = Database(my_db)
            #print(db.tables)
            #return db
        elif erd.entity_sets[y].supporting_relations[0] == erd.relationships[1].name:
            count+=1
            #print(count)
            amount_primary1 = len(erd.entity_sets[1].primary_key)
            for x in range(amount_primary1):
                erd.entity_sets[y].attributes.append(erd.entity_sets[1].primary_key[x])
                erd.entity_sets[y].primary_key.append(erd.entity_sets[1].primary_key[x])
            t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
            foreign_key = t
            
            #my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set()))
            my_db.append(Table(erd.entity_sets[y].name,set(erd.entity_sets[y].attributes),set(erd.entity_sets[y].primary_key), set(foreign_key)))
            #db = Database(my_db)
            #print(db.tables)
            #return db
        else:
            #len(erd.entity_sets[y].supporting_relations) == 0 :
            count+=1
            #print(count)
    amount_primary1 = len(erd.entity_sets[1].primary_key)
    for x in range(amount_primary1):
        erd.entity_sets[3].attributes.append(erd.entity_sets[1].primary_key[x])
        #erd.entity_sets[y].primary_key.append(erd.entity_sets[1].primary_key[x])
    t = ((*erd.entity_sets[1].primary_key,),erd.entity_sets[1].name,(*erd.entity_sets[1].primary_key,)),
    foreign_key = t
            
            #my_db.append(Table(erd.entity_sets[0].name,set(erd.entity_sets[0].attributes),set(erd.entity_sets[0].primary_key), set()))
    my_db.append(Table(erd.entity_sets[3].name,set(erd.entity_sets[3].attributes),set(erd.entity_sets[3].primary_key), set(foreign_key)))
    #print(erd.entity_sets[1].supporting_relations[0])
    #print(erd.relationships[0].name)
    db = Database(my_db)
    #print(db.tables)
    return db
   